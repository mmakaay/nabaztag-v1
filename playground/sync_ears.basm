include base

define $left            R0
define $left_new        R1
define $left_old        R2
define $left_gap_size   R3
define $right           R4
define $right_new       R5
define $right_old       R6
define $right_gap_size  R7
define $threshold       R8
define $synced          R9
define $sync_completed  R10

@main
    BSR @reset

    # In the ear syncing code, I let the ears rotate, while keeping
    # a tab on the motor encoder values in a loop. Within that loop,
    # I check if the encoder values have changed. If not, a counter
    # for the respective motor is incremented.
    # When the value for a motor encoder has changed, its counter
    # acts a measure for the amount of time that has passed between
    # two value changes.
    #
    # Since the encoder makes use of a gap for encoding its starting
    # position, we can make use of the counter to find this starting
    # position. The counter will be higher than between two regular
    # encoder value changes.
    #
    # Based on experimentation, I found that threshold values from 7 to
    # 25 yielded good results for syncing up the ear motors with the
    # encoder gap. Below 7, the gap was detected too soon. Above 25,
    # the gap was not detected. Thresholds close to these boundaries
    # produced unpredictable results.
    #
    # This is good! There is a wide range of thresholds that do work,
    # so we can use a value smack in the middle and rest assured that
    # this will likely work on other people's bunnies too.
    LD $threshold, 16

    LD $synced 0x00
    LD $sync_completed 0x11
    LD $left %MOTOR_LEFT
    LD $right %MOTOR_RIGHT

    BSR @motor_left_forward
    BSR @motor_right_forward

    MOTORGET $left_new, $left
    LD $left_old, $left_new
    CLR $left_gap_size

    MOTORGET $right_new, $right
    LD $right_old, $right_new
    CLR $right_gap_size

@sync_loop
    WAIT 1 # required to update the motor encoders

@sync_left
    MOTORGET $left_new, $left
    CMP $left_old, $left_new
    BNE @check_for_gap_left
    INC $left_gap_size

@sync_right
    MOTORGET $right_new, $right
    CMP $right_old, $right_new
    BNE @check_for_gap_right
    INC $right_gap_size

@restart_if_not_yet_synced
    CMP $synced, $sync_completed
    BNE @sync_loop

    BRA @idle

@check_for_gap_left
    LD $left_old, $left_new
    CMP $left_gap_size, $threshold
    BGT @gap_left_found
    CLR $left_gap_size
    BRA @sync_right

@gap_left_found
    BSR @motor_left_stop
    OR $synced, 0x10
    BRA @sync_right

@check_for_gap_right
    LD $right_old, $right_new
    CMP $right_gap_size, $threshold
    BGT @gap_right_found
    CLR $right_gap_size
    BRA @sync_loop

@gap_right_found
    BSR @motor_right_stop
    OR $synced, 0x01
    BRA @restart_if_not_yet_synced

